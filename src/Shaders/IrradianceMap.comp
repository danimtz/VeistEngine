#version 450

#include "utils/IBL_utils.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube HDRcubemap;

layout(rgba16f, set = 0, binding = 1) uniform writeonly imageCube irradianceMap;

const float deltaPhi = 0.025; //(2.0f * PI) / 180.0f; //0.025;//
const float deltaTheta = 0.025;//(0.5f * PI) / 64.0f; //0.025;//

void main() {
    const vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(irradianceMap).xy);

    //each cube face
    for (uint i = 0; i < 6; i++)
    {
        vec3 N = normalize(cubemapDirection(uv, i));
        
        vec3 up = vec3(0.0f, 1.0f, 0.0f);
        vec3 right = normalize(cross(up, N));
        up = normalize(cross(N, right));


        vec3 colorAcc = vec3(0.0f);
        float sampleCount = 0.0;
        
        //Rienmann sum over integral
        for(float phi = 0.0f; phi < 2.0f * PI; phi += deltaPhi)
        {
            for(float theta = 0.0f; theta < 0.5f * PI; theta += deltaTheta)
            {
                //convert spherical coordinates to cartesian tangent space
                vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
                //convert tangent space to world space
                vec3 sampleDir = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

              
                colorAcc += texture(HDRcubemap, sampleDir).rgb * cos(theta) * sin(theta);
                sampleCount++;
            }
        }

        
        vec3 irradiance = PI * (colorAcc/sampleCount);

        imageStore(irradianceMap, ivec3(gl_GlobalInvocationID.xy, i), vec4(irradiance, 1.0f));
    }
}