#version 450

#include "utils/IBL_utils.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube HDRcubemap;

layout(rgba16f, set = 0, binding = 1) uniform writeonly imageCube environmentMap;

layout( push_constant ) uniform constants
{
	float roughness;
} PushConstants;


void main() {
    const vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(environmentMap).xy);

    //each cube face
    for (uint i = 0; i < 6; i++)
    {
        vec3 N = normalize(cubemapDirection(uv, i));
        
        vec3 up = vec3(0.0f, 1.0f, 0.0f);
        vec3 right = normalize(cross(up, N));
        up = normalize(cross(N, right));

    
        //convert spherical coordinates to cartesian tangent space
        vec3 tangentSample = vec3(0, 0, 1);
        //convert tangent space to world space
        vec3 sampleDir = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

        
        vec3 irradiance = texture(HDRcubemap, sampleDir).rgb;
       
        imageStore(environmentMap, ivec3(gl_GlobalInvocationID.xy, i), vec4(irradiance, 1.0f));
    }
}