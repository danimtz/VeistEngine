#version 450

#include "utils/IBL_utils.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube HDRcubemap;

layout(rgba16f, set = 0, binding = 1) uniform writeonly imageCube environmentMap;

layout( push_constant ) uniform constants
{
	float roughness;
} PushConstants;


void main() {
    const vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(environmentMap).xy);

    //each cube face
    for (uint i = 0; i < 6; i++)
    {
        vec3 N = normalize(cubemapDirection(uv, i));
        vec3 V = N; //assume view direction is equal to sample direction

        vec3 prefilter_color = vec3(0.0);
        float total_weight = 0; 
        const uint sample_count = 1024;
        for(uint i = 0; i < sample_count; i++)
        {
            vec2 Xi = hammersley2d(i, sample_count);
            vec3 H = importanceSampleGGX(Xi, N, PushConstants.roughness);
            vec3 L = normalize(2.0 * dot(V,H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if (NdotL > 0.0)
            {
                prefilter_color += texture(HDRcubemap, L).rgb * NdotL;
                total_weight += NdotL;
            }
        }

        prefilter_color /= total_weight;
        imageStore(environmentMap, ivec3(gl_GlobalInvocationID.xy, i), vec4(prefilter_color, 1.0f));
    }
}