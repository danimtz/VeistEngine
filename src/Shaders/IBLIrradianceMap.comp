#version 450

#include "utils/IBL_utils.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube HDRcubemap;

layout(rgba16f, set = 0, binding = 1) uniform writeonly imageCube irradianceMap;


void main() {
    const vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(irradianceMap).xy);
    float resolution = float(textureSize(HDRcubemap, 0).x);

    //each cube face
    for (uint i = 0; i < 6; i++)
    {
        vec3 N = normalize(cubemapDirection(uv, i));
        vec3 V = N; //assume view direction is equal to sample direction

        vec3 diffuse_color = vec3(0.0);
        float total_weight = 0; 
        const uint sample_count = 2048;
        for(uint i = 0; i < sample_count; i++)
        {
            vec2 Xi = hammersley2d(i, sample_count);
            vec3 H = importanceSampleGGXDiffuse(Xi, N);
            vec3 L = normalize(2.0 * dot(V,H) * H - V);

            // From Chapter 20.4 Mipmap filtered samples in GPU Gems 3.
            float NdotL = max(dot(N, L), 0.0);
            if (NdotL > 0.0)
            {

                float pdf = max(0.0, dot(N, L) * (1.0/PI));

                float solidAngleTexel = 4.0 * PI / (6.0 * resolution * resolution);
                float solidAngleSample = 1.0 / (float(sample_count) * pdf + 0.0001);

                float mip_level = 0.5 * log2(float(solidAngleSample / solidAngleTexel));

                diffuse_color += textureLod(HDRcubemap, H, mip_level).rgb ;
                total_weight += 1;
            }
        }

        diffuse_color =  diffuse_color/total_weight;
        imageStore(irradianceMap, ivec3(gl_GlobalInvocationID.xy, i), vec4(diffuse_color, 1.0f));
        
    }
}